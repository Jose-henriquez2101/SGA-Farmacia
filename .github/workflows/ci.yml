name: CI

on:
  push:
    branches: 
    - Jose
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: crud_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/crud_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Push Prisma schema
        working-directory: ./backend
        run: npx prisma db push

      - name: Run E2E Tests
        working-directory: ./backend
        run: npm run test:e2e

  create-docker-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN_CD }}

    - name: Build and push Docker image
      run: |
        docker build ./backend -t ghcr.io/jose-henriquez2101/sga-farmacia:latest
        docker push ghcr.io/jose-henriquez2101/sga-farmacia:latest


  deploy:
    needs: create-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          echo "${{ secrets.EC2_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
            docker pull ghcr.io/jose-henriquez2101/sga-farmacia:latest
            docker stop sga-farmacia || true
            docker rm sga-farmacia || true
            docker run -d --name sga-farmacia -p 80:3000 ghcr.io/jose-henriquez2101/sga-farmacia:latest
          EOF